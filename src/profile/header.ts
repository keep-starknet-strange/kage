import { Expose, Type } from 'class-transformer';
import * as ExpoDevice from 'expo-device';
import uuid from 'react-native-uuid';

export default class Header {
    readonly version: ProfileVersion = ProfileVersion.V1;

    @Expose({ name: 'id' })
    readonly profileId: string;

    @Type(() => Actor)
    readonly createdBy: Actor;

    @Type(() => Actor)
    readonly updatedBy: Actor;

    public static createByCurrentDevice(): Header {
        return Header.create(
            new Device(uuid.v4())
        );
    }

    public static create(createdBy: Device): Header {
        const createdAt = new Date();
        const actor = new Actor(createdAt, createdBy);
        return new Header(
            uuid.v4(),
            actor,
            actor
        );
    }

    constructor(
        profileId: string,
        createdBy: Actor,
        updatedBy: Actor
    ) {
        this.profileId = profileId;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
    }

    updateUsed(at: Date): Header {
        return new Header(
            this.profileId,
            this.createdBy,
            new Actor(at, this.updatedBy.device)
        );
    }

}

export enum ProfileVersion {
    V1 = 1
}

export class Actor {
    @Type(() => Date)
    readonly actedAt: Date;

    @Type(() => Device)
    readonly device: Device;

    constructor(time: Date, device: Device) {
        this.actedAt = time;
        this.device = device;
    }
}

export class Device {
    // A unique identifier for the device. This is a UUIDv4 string. 
    // Generated by KAGE. Later it can be used to identify the device in case
    // we implement a backup profile feature.
    readonly id: string;

    // The device brand. The consumer-visible brand of the product/hardware. On web, this value is always null.
    // Examples:
    // - "Apple"
    // - "google"
    // - "xiaomi"
    readonly brand: string | null;

    // The human-friendly name of the device model. This is the name 
    // that people would typically use to refer to the device rather 
    // than a programmatic model identifier.
    // Examples: 
    // - Android: "Pixel 2" 
    // - iOS: "iPhone XS Max" 
    // - web: "iPhone", null
    readonly modelName: string | null;

    // The human-readable name of the device, which may be set by the device's user
    // Examples:
    // - "Michael's Pixel 8 Pro"
    readonly deviceName: string | null;

    // The type of the device as a DeviceType enum value.
    readonly deviceType: DeviceType;

    // true if the app is running on a real device and false if running in a simulator or emulator. On web, this is always set to true.
    readonly isDevice: boolean;

    // The actual device manufacturer of the product or hardware. This value of this field may be null if it cannot be determined.
    readonly manufacturer: string | null;

    constructor(id: string) {
        this.id = id;
        this.brand = ExpoDevice.brand;
        this.modelName = ExpoDevice.modelName;
        this.deviceName = ExpoDevice.deviceName;
        this.isDevice = ExpoDevice.isDevice;
        this.deviceType = getDeviceType();
        this.manufacturer = ExpoDevice.manufacturer;
    }
}

export enum DeviceType {
    /**
     * An unrecognized device type.
     */
    UNKNOWN = 'UNKNOWN',
    /**
     * Mobile phone handsets, typically with a touch screen and held in one hand.
     */
    PHONE = 'PHONE',
    /**
     * Tablet computers, typically with a touch screen that is larger than a usual phone.
     */
    TABLET = 'TABLET',
    /**
     * Desktop or laptop computers, typically with a keyboard and mouse.
     */
    DESKTOP = 'DESKTOP',
    /**
     * Device with TV-based interfaces.
     */
    TV = 'TV',
}

function getDeviceType(): DeviceType {
    switch (ExpoDevice.deviceType) {
        case ExpoDevice.DeviceType.UNKNOWN:
            return DeviceType.UNKNOWN;
        case ExpoDevice.DeviceType.PHONE:
            return DeviceType.PHONE;
        case ExpoDevice.DeviceType.TABLET:
            return DeviceType.TABLET;
        case ExpoDevice.DeviceType.DESKTOP:
            return DeviceType.DESKTOP;
        case ExpoDevice.DeviceType.TV:
            return DeviceType.TV;
        default:
            return DeviceType.UNKNOWN;
    }
}