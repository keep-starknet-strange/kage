import { DeviceType } from "expo-device";
import KeySource from "./keys/keySource";
import { Header } from "./header";
import Settings from "./settings/settings";
import { Type } from "class-transformer";

export class Profile1 {
    @Type(() => Header)
    readonly header: Header;

    @Type(() => KeySource)
    readonly keySources: readonly KeySource[];

    @Type(() => Settings)
    readonly settings: Settings;

    constructor(
        header: Header,
        keySources: KeySource[],
        settings: Settings
    ) {
        this.header = header;
        this.keySources = keySources;
        this.settings = settings;
    }
}

export type Profile = {
    /**
     * The `header` field provides metadata about the profile structure, 
     * and is intended to help with identification, versioning, or migration purposes. 
     * IMPORTANT: This part of the profile should remain unchanged in future iterations 
     * to ensure backward compatibility and consistent handling of profile data.
     */
    header: Profile.Header;

    /**
     * The `keySources` field contains the list of all key sources used in the profile.
     * Used for identifying and managing key sources such as seed phrases.
     */
    keySources: Profile.KeySource[];

    /**
     * The `networks` field contains the list of all networks used in the profile.
     * Identifies different accounts in networks such as SN_MAINNET, SN_SEPOLIA.
     */
    networks: Profile.Network[];

    /**
     * The `settings` field contains the settings for the profile.
     * Manages settings such as active network, ui settings, etc.
     */
    settings: Profile.Settings;
}

export namespace Profile {

    export type NetworkId = number;

    export type Network = {
        id: NetworkId;
        accounts: Account[];
    }

    export type Account = {
        address: string;
        networkId: NetworkId;
        origin: Account.Origin;
        // TODO more details might be added here once we discuss the design on private ERC20s.
    }

    export namespace Account {
        export type Origin = {
            keySourceId: KeySource.ID;
            derivationPath: string;
        }
    }

    // KEYS
    export type KeySource = {
        id: KeySource.ID;
        type: KeySource.Type;
    }

    export namespace KeySource {
        export type ID = string;

        export enum Type {
            SEED_PHRASE = "seed_phrase",
            // might add more in the future...
        }
    }


    // SETTINGS

    export type Settings = {
        networks: Settings.Networks;
        wallet: Settings.Wallet;
    }

    export namespace Settings {
        export type Networks = {
            currentNetworkId: NetworkId;
            networkDefinitions: NetworkDerfinition[];
        }

        export type Wallet = {
            isBalanceHidden: boolean;
        }
    }

    export type NetworkDerfinition = {
        rpcUrl: URL;
        chainId: NetworkId;
        accountClassHash: string;
        feeTokenAddress: string;
        blockExplorerUrl: URL | null;
    }



    // HEADER
    export type Header = {
        version: Version;
        profileId: string;
        createdBy: Actor;
        updatedBy: Actor;
    }

    export type Actor = {
        actedAt: Date;
        device: Device;
    }

    export type Device = {
        // A unique identifier for the device. This is a UUIDv4 string. 
        // Generated by KAGE. Later it can be used to identify the device in case
        // we implement a backup profile feature.
        id: string;

        // The device brand. The consumer-visible brand of the product/hardware. On web, this value is always null.
        // Examples:
        // - "Apple"
        // - "google"
        // - "xiaomi"
        brand: string | null;
        
        // The human-friendly name of the device model. This is the name 
        // that people would typically use to refer to the device rather 
        // than a programmatic model identifier.
        // Examples: 
        // - Android: "Pixel 2" 
        // - iOS: "iPhone XS Max" 
        // - web: "iPhone", null
        modelName: string;

        // The human-readable name of the device, which may be set by the device's user
        // Examples:
        // - "Michael's Pixel 8 Pro"
        deviceName: string; 

        // The type of the device as a DeviceType enum value.
        deviceType: DeviceType;

        // true if the app is running on a real device and false if running in a simulator or emulator. On web, this is always set to true.
        isDevice: boolean;

        // The actual device manufacturer of the product or hardware. This value of this field may be null if it cannot be determined.
        manufacturer: string | null;
    }

    export enum Version {
        V1 = 1
    }
}